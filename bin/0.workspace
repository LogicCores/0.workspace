#!/usr/bin/env node

var LIB = {
    VERBOSE: (!!process.env.VERBOSE) || false,
    path: require("path"),
    fs: require("fs-extra"),
    minimist: require("minimist"),
    request: require("request"),
    Promise: require("bluebird"),
    colors: require("colors")
};
LIB.Promise.promisifyAll(LIB.fs);
LIB.fs.existsAsync = function (path) {
    return new LIB.Promise(function (resolve, reject) {
        return LIB.fs.exists(path, resolve);
    });
}
LIB.Promise.promisifyAll(LIB.request);


exports.main = function (argv) {

    const REMOTE_SOURCE_REVISIONS_URL = "https://api.github.com/repos/0system/0system.0/tags";


    function showUsage () {
        var lines = [];
        lines.push("");
        lines.push("Workspace Manager:".bold + " https://github.com/LogicCores/0.workspace".blue);
        lines.push("for Zero System:".bold + " https://github.com/0system".blue);
        lines.push("");
        lines.push("Usage: ");
        lines.push("");
        lines.push("  0w init [--inject-scripts]      Add Zero System to a new or existing git project");
        lines.push("  0w current                      Display currently activated version");
        lines.push("  0w ls                           List installed versions");
        lines.push("  0w ls-remote                    List remote versions available for install");
        lines.push("  0w install [-s] <version/uri>   Download and install a <version/uri>, [-s] from source");
        lines.push("  0w use <version/path>           Modify 'package.json' and './.0' to use <version/path>");
        lines.push("");
        lines.push("  0w update                       Pull changes, checkout submodules and re-install");
        lines.push("  0w edit                         Launch an editor");
        lines.push("  0w dev                          Run system in development mode using development profile");
        lines.push("  0w dev --production             Run system in production mode using production profile");
        lines.push("  0w dev -- --profile ./Deployments/<name>.proto.profile.ccjson");
        lines.push("                                  Run system in development mode using custom profile overlay");
        lines.push("  0w encrypt                      Encrypt raw profile data using workspace secret");
        lines.push("  0w test                         Run whole system test suite");
        lines.push("");
        lines.push("  0w bundle                       Freeze everything for consistent distribution");
        lines.push("  0w deploy                       Deploy latest commit to staging");
        lines.push("  0w deploy --production          Deploy latest commit to production");
        lines.push("  0w publish                      Publish latest commit");
        lines.push("");
        lines.push("  0w start                        Run system in production mode using production profile");
        lines.push("");
        process.stdout.write(lines.join("\n") + "\n");
        return LIB.Promise.resolve();
    }
    
    function loadCurrentStatus () {

        return LIB.Promise.resolve({
            version: {
                current: null
            }
        });
    }

    var command = argv["_"].shift() || "";
    
    if (argv["help"] || argv["h"]) {
        return showUsage();
    }

    if (argv["verbose"] || argv["v"]) {
        LIB.VERBOSE = true;
    }

    function runDefault () {

// TODO: See if we can find a workspace script for the command and run that
/*
        lines.push("  0w update                  Pull changes, checkout submodules and re-install");
        lines.push("  0w edit                    Launch an editor");
        lines.push("  0w dev                     Run system in development mode using development profile");
        lines.push("  0w dev --production        Run system in production mode using production profile");
        lines.push("  0w dev -- --profile ./Deployments/<name>.proto.profile.ccjson");
        lines.push("                                      Run system in development mode using custom profile overlay");
        lines.push("  0w encrypt                 Encrypt raw profile data using workspace secret");
        lines.push("  0w test                    Test system");
        lines.push("");
        lines.push("  0w bundle                  Freeze everything for consistent distribution");
        lines.push("  0w deploy                  Deploy latest commit to staging");
        lines.push("  0w deploy --production     Deploy latest commit to production");
        lines.push("  0w publish                 Publish latest commit");
        lines.push("");
        lines.push("  0w start                   Run system in production mode using production profile");
        lines.push("");
*/

        return LIB.Promise.try(function () {
            process.stdout.write(("\nError: Command '" + command + "' not found!\n").red);
            return showUsage();
        });
    }

    switch (command) {

        case "init":
            return LIB.Promise.try(function () {
/*
Init

  1. Configure `./_Deployments/127.0.0.1:8090.profile.ccjson` to point to your own github application
  2. Rename and configure `./_Deployments/zerosystem-workspace.herokuapp.com.profile.ccjson` to point to your own heroku application for your workspace
  3. Rename and add remote for the heroku application `git remote add heroku git@heroku.com:zerosystem-workspace.git`

*/
            });

        case "current":
            return LIB.Promise.try(function () {
                return loadCurrentStatus().then(function (status) {
                    if (!status.version.current) {
                        throw new Error("No release linked!");
                    }
                    process.stdout.write(status.version.current + "\n");
                    return null;
                });
            });

        case "ls":
            return LIB.Promise.try(function () {
                
            });

        case "ls-remote":
            return LIB.Promise.try(function () {
                return LIB.request.getAsync(REMOTE_SOURCE_REVISIONS_URL, {
                    headers: {
                        "User-Agent": "github.com/LogicCores/0.workspace using npm/request"
                    },
                    json: true
                }).then(function (response) {
                    response.body.forEach(function (tag) {
                        process.stdout.write(tag.name + "\n");
                    });
                    return null;
                });
            });

        case "install":
            return LIB.Promise.try(function () {

                // TODO: If no version specified run workspace install script.

            });

        case "use":
            return LIB.Promise.try(function () {
                
            });

        default:
            return runDefault();
    }
}


if (require.main === module) {
    exports.main(
        LIB.minimist(process.argv.slice(2))
    ).then(function () {
        process.exit(0);
        return null;
    }).catch(function (err) {
        if (LIB.VERBOSE) {
            console.error(("" + err.stack).red);
        } else {
            console.error(("Error: " + err.message).red);
        }
        process.exit(1);
        return null;
    });
}

